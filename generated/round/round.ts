// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApplicationMetaPtrUpdated extends ethereum.Event {
  get params(): ApplicationMetaPtrUpdated__Params {
    return new ApplicationMetaPtrUpdated__Params(this);
  }
}

export class ApplicationMetaPtrUpdated__Params {
  _event: ApplicationMetaPtrUpdated;

  constructor(event: ApplicationMetaPtrUpdated) {
    this._event = event;
  }

  get oldMetaPtr(): ApplicationMetaPtrUpdatedOldMetaPtrStruct {
    return changetype<ApplicationMetaPtrUpdatedOldMetaPtrStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }

  get newMetaPtr(): ApplicationMetaPtrUpdatedNewMetaPtrStruct {
    return changetype<ApplicationMetaPtrUpdatedNewMetaPtrStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class ApplicationMetaPtrUpdatedOldMetaPtrStruct extends ethereum.Tuple {
  get protocol(): BigInt {
    return this[0].toBigInt();
  }

  get pointer(): string {
    return this[1].toString();
  }
}

export class ApplicationMetaPtrUpdatedNewMetaPtrStruct extends ethereum.Tuple {
  get protocol(): BigInt {
    return this[0].toBigInt();
  }

  get pointer(): string {
    return this[1].toString();
  }
}

export class ApplicationStatusesUpdated extends ethereum.Event {
  get params(): ApplicationStatusesUpdated__Params {
    return new ApplicationStatusesUpdated__Params(this);
  }
}

export class ApplicationStatusesUpdated__Params {
  _event: ApplicationStatusesUpdated;

  constructor(event: ApplicationStatusesUpdated) {
    this._event = event;
  }

  get index(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get status(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ApplicationsEndTimeUpdated extends ethereum.Event {
  get params(): ApplicationsEndTimeUpdated__Params {
    return new ApplicationsEndTimeUpdated__Params(this);
  }
}

export class ApplicationsEndTimeUpdated__Params {
  _event: ApplicationsEndTimeUpdated;

  constructor(event: ApplicationsEndTimeUpdated) {
    this._event = event;
  }

  get oldTime(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ApplicationsStartTimeUpdated extends ethereum.Event {
  get params(): ApplicationsStartTimeUpdated__Params {
    return new ApplicationsStartTimeUpdated__Params(this);
  }
}

export class ApplicationsStartTimeUpdated__Params {
  _event: ApplicationsStartTimeUpdated;

  constructor(event: ApplicationsStartTimeUpdated) {
    this._event = event;
  }

  get oldTime(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class MatchAmountUpdated extends ethereum.Event {
  get params(): MatchAmountUpdated__Params {
    return new MatchAmountUpdated__Params(this);
  }
}

export class MatchAmountUpdated__Params {
  _event: MatchAmountUpdated;

  constructor(event: MatchAmountUpdated) {
    this._event = event;
  }

  get newAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NewProjectApplication extends ethereum.Event {
  get params(): NewProjectApplication__Params {
    return new NewProjectApplication__Params(this);
  }
}

export class NewProjectApplication__Params {
  _event: NewProjectApplication;

  constructor(event: NewProjectApplication) {
    this._event = event;
  }

  get projectID(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get applicationIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get applicationMetaPtr(): NewProjectApplicationApplicationMetaPtrStruct {
    return changetype<NewProjectApplicationApplicationMetaPtrStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }
}

export class NewProjectApplicationApplicationMetaPtrStruct extends ethereum.Tuple {
  get protocol(): BigInt {
    return this[0].toBigInt();
  }

  get pointer(): string {
    return this[1].toString();
  }
}

export class PayFeeAndEscrowFundsToPayoutContract extends ethereum.Event {
  get params(): PayFeeAndEscrowFundsToPayoutContract__Params {
    return new PayFeeAndEscrowFundsToPayoutContract__Params(this);
  }
}

export class PayFeeAndEscrowFundsToPayoutContract__Params {
  _event: PayFeeAndEscrowFundsToPayoutContract;

  constructor(event: PayFeeAndEscrowFundsToPayoutContract) {
    this._event = event;
  }

  get matchAmountAfterFees(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get protocolFeeAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get roundFeeAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ProjectsMetaPtrUpdated extends ethereum.Event {
  get params(): ProjectsMetaPtrUpdated__Params {
    return new ProjectsMetaPtrUpdated__Params(this);
  }
}

export class ProjectsMetaPtrUpdated__Params {
  _event: ProjectsMetaPtrUpdated;

  constructor(event: ProjectsMetaPtrUpdated) {
    this._event = event;
  }

  get oldMetaPtr(): ProjectsMetaPtrUpdatedOldMetaPtrStruct {
    return changetype<ProjectsMetaPtrUpdatedOldMetaPtrStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }

  get newMetaPtr(): ProjectsMetaPtrUpdatedNewMetaPtrStruct {
    return changetype<ProjectsMetaPtrUpdatedNewMetaPtrStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class ProjectsMetaPtrUpdatedOldMetaPtrStruct extends ethereum.Tuple {
  get protocol(): BigInt {
    return this[0].toBigInt();
  }

  get pointer(): string {
    return this[1].toString();
  }
}

export class ProjectsMetaPtrUpdatedNewMetaPtrStruct extends ethereum.Tuple {
  get protocol(): BigInt {
    return this[0].toBigInt();
  }

  get pointer(): string {
    return this[1].toString();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoundEndTimeUpdated extends ethereum.Event {
  get params(): RoundEndTimeUpdated__Params {
    return new RoundEndTimeUpdated__Params(this);
  }
}

export class RoundEndTimeUpdated__Params {
  _event: RoundEndTimeUpdated;

  constructor(event: RoundEndTimeUpdated) {
    this._event = event;
  }

  get oldTime(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RoundFeeAddressUpdated extends ethereum.Event {
  get params(): RoundFeeAddressUpdated__Params {
    return new RoundFeeAddressUpdated__Params(this);
  }
}

export class RoundFeeAddressUpdated__Params {
  _event: RoundFeeAddressUpdated;

  constructor(event: RoundFeeAddressUpdated) {
    this._event = event;
  }

  get roundFeeAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RoundFeePercentageUpdated extends ethereum.Event {
  get params(): RoundFeePercentageUpdated__Params {
    return new RoundFeePercentageUpdated__Params(this);
  }
}

export class RoundFeePercentageUpdated__Params {
  _event: RoundFeePercentageUpdated;

  constructor(event: RoundFeePercentageUpdated) {
    this._event = event;
  }

  get roundFeePercentage(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RoundMetaPtrUpdated extends ethereum.Event {
  get params(): RoundMetaPtrUpdated__Params {
    return new RoundMetaPtrUpdated__Params(this);
  }
}

export class RoundMetaPtrUpdated__Params {
  _event: RoundMetaPtrUpdated;

  constructor(event: RoundMetaPtrUpdated) {
    this._event = event;
  }

  get oldMetaPtr(): RoundMetaPtrUpdatedOldMetaPtrStruct {
    return changetype<RoundMetaPtrUpdatedOldMetaPtrStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }

  get newMetaPtr(): RoundMetaPtrUpdatedNewMetaPtrStruct {
    return changetype<RoundMetaPtrUpdatedNewMetaPtrStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class RoundMetaPtrUpdatedOldMetaPtrStruct extends ethereum.Tuple {
  get protocol(): BigInt {
    return this[0].toBigInt();
  }

  get pointer(): string {
    return this[1].toString();
  }
}

export class RoundMetaPtrUpdatedNewMetaPtrStruct extends ethereum.Tuple {
  get protocol(): BigInt {
    return this[0].toBigInt();
  }

  get pointer(): string {
    return this[1].toString();
  }
}

export class RoundStartTimeUpdated extends ethereum.Event {
  get params(): RoundStartTimeUpdated__Params {
    return new RoundStartTimeUpdated__Params(this);
  }
}

export class RoundStartTimeUpdated__Params {
  _event: RoundStartTimeUpdated;

  constructor(event: RoundStartTimeUpdated) {
    this._event = event;
  }

  get oldTime(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class openSourceRound__applicationMetaPtrResult {
  value0: BigInt;
  value1: string;

  constructor(value0: BigInt, value1: string) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    return map;
  }

  getProtocol(): BigInt {
    return this.value0;
  }

  getPointer(): string {
    return this.value1;
  }
}

export class openSourceRound__applicationsResultMetaPtrStruct extends ethereum.Tuple {
  get protocol(): BigInt {
    return this[0].toBigInt();
  }

  get pointer(): string {
    return this[1].toString();
  }
}

export class openSourceRound__applicationsResult {
  value0: Bytes;
  value1: BigInt;
  value2: openSourceRound__applicationsResultMetaPtrStruct;

  constructor(
    value0: Bytes,
    value1: BigInt,
    value2: openSourceRound__applicationsResultMetaPtrStruct
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromTuple(this.value2));
    return map;
  }

  getProjectID(): Bytes {
    return this.value0;
  }

  getApplicationIndex(): BigInt {
    return this.value1;
  }

  getMetaPtr(): openSourceRound__applicationsResultMetaPtrStruct {
    return this.value2;
  }
}

export class openSourceRound__roundMetaPtrResult {
  value0: BigInt;
  value1: string;

  constructor(value0: BigInt, value1: string) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    return map;
  }

  getProtocol(): BigInt {
    return this.value0;
  }

  getPointer(): string {
    return this.value1;
  }
}

export class openSourceRound extends ethereum.SmartContract {
  static bind(address: Address): openSourceRound {
    return new openSourceRound("openSourceRound", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ROUND_OPERATOR_ROLE(): Bytes {
    let result = super.call(
      "ROUND_OPERATOR_ROLE",
      "ROUND_OPERATOR_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ROUND_OPERATOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ROUND_OPERATOR_ROLE",
      "ROUND_OPERATOR_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  VERSION(): string {
    let result = super.call("VERSION", "VERSION():(string)", []);

    return result[0].toString();
  }

  try_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall("VERSION", "VERSION():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  alloSettings(): Address {
    let result = super.call("alloSettings", "alloSettings():(address)", []);

    return result[0].toAddress();
  }

  try_alloSettings(): ethereum.CallResult<Address> {
    let result = super.tryCall("alloSettings", "alloSettings():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  applicationMetaPtr(): openSourceRound__applicationMetaPtrResult {
    let result = super.call(
      "applicationMetaPtr",
      "applicationMetaPtr():(uint256,string)",
      []
    );

    return new openSourceRound__applicationMetaPtrResult(
      result[0].toBigInt(),
      result[1].toString()
    );
  }

  try_applicationMetaPtr(): ethereum.CallResult<
    openSourceRound__applicationMetaPtrResult
  > {
    let result = super.tryCall(
      "applicationMetaPtr",
      "applicationMetaPtr():(uint256,string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new openSourceRound__applicationMetaPtrResult(
        value[0].toBigInt(),
        value[1].toString()
      )
    );
  }

  applicationStatusesBitMap(param0: BigInt): BigInt {
    let result = super.call(
      "applicationStatusesBitMap",
      "applicationStatusesBitMap(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_applicationStatusesBitMap(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "applicationStatusesBitMap",
      "applicationStatusesBitMap(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  applications(param0: BigInt): openSourceRound__applicationsResult {
    let result = super.call(
      "applications",
      "applications(uint256):(bytes32,uint256,(uint256,string))",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new openSourceRound__applicationsResult(
      result[0].toBytes(),
      result[1].toBigInt(),
      changetype<openSourceRound__applicationsResultMetaPtrStruct>(
        result[2].toTuple()
      )
    );
  }

  try_applications(
    param0: BigInt
  ): ethereum.CallResult<openSourceRound__applicationsResult> {
    let result = super.tryCall(
      "applications",
      "applications(uint256):(bytes32,uint256,(uint256,string))",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new openSourceRound__applicationsResult(
        value[0].toBytes(),
        value[1].toBigInt(),
        changetype<openSourceRound__applicationsResultMetaPtrStruct>(
          value[2].toTuple()
        )
      )
    );
  }

  applicationsEndTime(): BigInt {
    let result = super.call(
      "applicationsEndTime",
      "applicationsEndTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_applicationsEndTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "applicationsEndTime",
      "applicationsEndTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  applicationsIndexesByProjectID(param0: Bytes, param1: BigInt): BigInt {
    let result = super.call(
      "applicationsIndexesByProjectID",
      "applicationsIndexesByProjectID(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_applicationsIndexesByProjectID(
    param0: Bytes,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "applicationsIndexesByProjectID",
      "applicationsIndexesByProjectID(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  applicationsStartTime(): BigInt {
    let result = super.call(
      "applicationsStartTime",
      "applicationsStartTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_applicationsStartTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "applicationsStartTime",
      "applicationsStartTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApplicationIndexesByProjectID(projectID: Bytes): Array<BigInt> {
    let result = super.call(
      "getApplicationIndexesByProjectID",
      "getApplicationIndexesByProjectID(bytes32):(uint256[])",
      [ethereum.Value.fromFixedBytes(projectID)]
    );

    return result[0].toBigIntArray();
  }

  try_getApplicationIndexesByProjectID(
    projectID: Bytes
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getApplicationIndexesByProjectID",
      "getApplicationIndexesByProjectID(bytes32):(uint256[])",
      [ethereum.Value.fromFixedBytes(projectID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getApplicationStatus(applicationIndex: BigInt): BigInt {
    let result = super.call(
      "getApplicationStatus",
      "getApplicationStatus(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(applicationIndex)]
    );

    return result[0].toBigInt();
  }

  try_getApplicationStatus(
    applicationIndex: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getApplicationStatus",
      "getApplicationStatus(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(applicationIndex)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  matchAmount(): BigInt {
    let result = super.call("matchAmount", "matchAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_matchAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("matchAmount", "matchAmount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextApplicationIndex(): BigInt {
    let result = super.call(
      "nextApplicationIndex",
      "nextApplicationIndex():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nextApplicationIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextApplicationIndex",
      "nextApplicationIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  payoutStrategy(): Address {
    let result = super.call("payoutStrategy", "payoutStrategy():(address)", []);

    return result[0].toAddress();
  }

  try_payoutStrategy(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "payoutStrategy",
      "payoutStrategy():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  roundEndTime(): BigInt {
    let result = super.call("roundEndTime", "roundEndTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_roundEndTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("roundEndTime", "roundEndTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  roundFeeAddress(): Address {
    let result = super.call(
      "roundFeeAddress",
      "roundFeeAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_roundFeeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "roundFeeAddress",
      "roundFeeAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  roundFeePercentage(): BigInt {
    let result = super.call(
      "roundFeePercentage",
      "roundFeePercentage():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_roundFeePercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "roundFeePercentage",
      "roundFeePercentage():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  roundMetaPtr(): openSourceRound__roundMetaPtrResult {
    let result = super.call(
      "roundMetaPtr",
      "roundMetaPtr():(uint256,string)",
      []
    );

    return new openSourceRound__roundMetaPtrResult(
      result[0].toBigInt(),
      result[1].toString()
    );
  }

  try_roundMetaPtr(): ethereum.CallResult<openSourceRound__roundMetaPtrResult> {
    let result = super.tryCall(
      "roundMetaPtr",
      "roundMetaPtr():(uint256,string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new openSourceRound__roundMetaPtrResult(
        value[0].toBigInt(),
        value[1].toString()
      )
    );
  }

  roundStartTime(): BigInt {
    let result = super.call("roundStartTime", "roundStartTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_roundStartTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "roundStartTime",
      "roundStartTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  votingStrategy(): Address {
    let result = super.call("votingStrategy", "votingStrategy():(address)", []);

    return result[0].toAddress();
  }

  try_votingStrategy(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "votingStrategy",
      "votingStrategy():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ApplyToRoundCall extends ethereum.Call {
  get inputs(): ApplyToRoundCall__Inputs {
    return new ApplyToRoundCall__Inputs(this);
  }

  get outputs(): ApplyToRoundCall__Outputs {
    return new ApplyToRoundCall__Outputs(this);
  }
}

export class ApplyToRoundCall__Inputs {
  _call: ApplyToRoundCall;

  constructor(call: ApplyToRoundCall) {
    this._call = call;
  }

  get projectID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get newApplicationMetaPtr(): ApplyToRoundCallNewApplicationMetaPtrStruct {
    return changetype<ApplyToRoundCallNewApplicationMetaPtrStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class ApplyToRoundCall__Outputs {
  _call: ApplyToRoundCall;

  constructor(call: ApplyToRoundCall) {
    this._call = call;
  }
}

export class ApplyToRoundCallNewApplicationMetaPtrStruct extends ethereum.Tuple {
  get protocol(): BigInt {
    return this[0].toBigInt();
  }

  get pointer(): string {
    return this[1].toString();
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get encodedParameters(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _alloSettings(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetApplicationStatusesCall extends ethereum.Call {
  get inputs(): SetApplicationStatusesCall__Inputs {
    return new SetApplicationStatusesCall__Inputs(this);
  }

  get outputs(): SetApplicationStatusesCall__Outputs {
    return new SetApplicationStatusesCall__Outputs(this);
  }
}

export class SetApplicationStatusesCall__Inputs {
  _call: SetApplicationStatusesCall;

  constructor(call: SetApplicationStatusesCall) {
    this._call = call;
  }

  get statuses(): Array<SetApplicationStatusesCallStatusesStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      SetApplicationStatusesCallStatusesStruct
    >();
  }
}

export class SetApplicationStatusesCall__Outputs {
  _call: SetApplicationStatusesCall;

  constructor(call: SetApplicationStatusesCall) {
    this._call = call;
  }
}

export class SetApplicationStatusesCallStatusesStruct extends ethereum.Tuple {
  get index(): BigInt {
    return this[0].toBigInt();
  }

  get statusRow(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetReadyForPayoutCall extends ethereum.Call {
  get inputs(): SetReadyForPayoutCall__Inputs {
    return new SetReadyForPayoutCall__Inputs(this);
  }

  get outputs(): SetReadyForPayoutCall__Outputs {
    return new SetReadyForPayoutCall__Outputs(this);
  }
}

export class SetReadyForPayoutCall__Inputs {
  _call: SetReadyForPayoutCall;

  constructor(call: SetReadyForPayoutCall) {
    this._call = call;
  }
}

export class SetReadyForPayoutCall__Outputs {
  _call: SetReadyForPayoutCall;

  constructor(call: SetReadyForPayoutCall) {
    this._call = call;
  }
}

export class UpdateApplicationMetaPtrCall extends ethereum.Call {
  get inputs(): UpdateApplicationMetaPtrCall__Inputs {
    return new UpdateApplicationMetaPtrCall__Inputs(this);
  }

  get outputs(): UpdateApplicationMetaPtrCall__Outputs {
    return new UpdateApplicationMetaPtrCall__Outputs(this);
  }
}

export class UpdateApplicationMetaPtrCall__Inputs {
  _call: UpdateApplicationMetaPtrCall;

  constructor(call: UpdateApplicationMetaPtrCall) {
    this._call = call;
  }

  get newApplicationMetaPtr(): UpdateApplicationMetaPtrCallNewApplicationMetaPtrStruct {
    return changetype<UpdateApplicationMetaPtrCallNewApplicationMetaPtrStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class UpdateApplicationMetaPtrCall__Outputs {
  _call: UpdateApplicationMetaPtrCall;

  constructor(call: UpdateApplicationMetaPtrCall) {
    this._call = call;
  }
}

export class UpdateApplicationMetaPtrCallNewApplicationMetaPtrStruct extends ethereum.Tuple {
  get protocol(): BigInt {
    return this[0].toBigInt();
  }

  get pointer(): string {
    return this[1].toString();
  }
}

export class UpdateMatchAmountCall extends ethereum.Call {
  get inputs(): UpdateMatchAmountCall__Inputs {
    return new UpdateMatchAmountCall__Inputs(this);
  }

  get outputs(): UpdateMatchAmountCall__Outputs {
    return new UpdateMatchAmountCall__Outputs(this);
  }
}

export class UpdateMatchAmountCall__Inputs {
  _call: UpdateMatchAmountCall;

  constructor(call: UpdateMatchAmountCall) {
    this._call = call;
  }

  get newAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMatchAmountCall__Outputs {
  _call: UpdateMatchAmountCall;

  constructor(call: UpdateMatchAmountCall) {
    this._call = call;
  }
}

export class UpdateRoundFeeAddressCall extends ethereum.Call {
  get inputs(): UpdateRoundFeeAddressCall__Inputs {
    return new UpdateRoundFeeAddressCall__Inputs(this);
  }

  get outputs(): UpdateRoundFeeAddressCall__Outputs {
    return new UpdateRoundFeeAddressCall__Outputs(this);
  }
}

export class UpdateRoundFeeAddressCall__Inputs {
  _call: UpdateRoundFeeAddressCall;

  constructor(call: UpdateRoundFeeAddressCall) {
    this._call = call;
  }

  get newFeeAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateRoundFeeAddressCall__Outputs {
  _call: UpdateRoundFeeAddressCall;

  constructor(call: UpdateRoundFeeAddressCall) {
    this._call = call;
  }
}

export class UpdateRoundFeePercentageCall extends ethereum.Call {
  get inputs(): UpdateRoundFeePercentageCall__Inputs {
    return new UpdateRoundFeePercentageCall__Inputs(this);
  }

  get outputs(): UpdateRoundFeePercentageCall__Outputs {
    return new UpdateRoundFeePercentageCall__Outputs(this);
  }
}

export class UpdateRoundFeePercentageCall__Inputs {
  _call: UpdateRoundFeePercentageCall;

  constructor(call: UpdateRoundFeePercentageCall) {
    this._call = call;
  }

  get newFeePercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateRoundFeePercentageCall__Outputs {
  _call: UpdateRoundFeePercentageCall;

  constructor(call: UpdateRoundFeePercentageCall) {
    this._call = call;
  }
}

export class UpdateRoundMetaPtrCall extends ethereum.Call {
  get inputs(): UpdateRoundMetaPtrCall__Inputs {
    return new UpdateRoundMetaPtrCall__Inputs(this);
  }

  get outputs(): UpdateRoundMetaPtrCall__Outputs {
    return new UpdateRoundMetaPtrCall__Outputs(this);
  }
}

export class UpdateRoundMetaPtrCall__Inputs {
  _call: UpdateRoundMetaPtrCall;

  constructor(call: UpdateRoundMetaPtrCall) {
    this._call = call;
  }

  get newRoundMetaPtr(): UpdateRoundMetaPtrCallNewRoundMetaPtrStruct {
    return changetype<UpdateRoundMetaPtrCallNewRoundMetaPtrStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class UpdateRoundMetaPtrCall__Outputs {
  _call: UpdateRoundMetaPtrCall;

  constructor(call: UpdateRoundMetaPtrCall) {
    this._call = call;
  }
}

export class UpdateRoundMetaPtrCallNewRoundMetaPtrStruct extends ethereum.Tuple {
  get protocol(): BigInt {
    return this[0].toBigInt();
  }

  get pointer(): string {
    return this[1].toString();
  }
}

export class UpdateStartAndEndTimesCall extends ethereum.Call {
  get inputs(): UpdateStartAndEndTimesCall__Inputs {
    return new UpdateStartAndEndTimesCall__Inputs(this);
  }

  get outputs(): UpdateStartAndEndTimesCall__Outputs {
    return new UpdateStartAndEndTimesCall__Outputs(this);
  }
}

export class UpdateStartAndEndTimesCall__Inputs {
  _call: UpdateStartAndEndTimesCall;

  constructor(call: UpdateStartAndEndTimesCall) {
    this._call = call;
  }

  get newApplicationsStartTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newApplicationsEndTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get newRoundStartTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get newRoundEndTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UpdateStartAndEndTimesCall__Outputs {
  _call: UpdateStartAndEndTimesCall;

  constructor(call: UpdateStartAndEndTimesCall) {
    this._call = call;
  }
}

export class VoteCall extends ethereum.Call {
  get inputs(): VoteCall__Inputs {
    return new VoteCall__Inputs(this);
  }

  get outputs(): VoteCall__Outputs {
    return new VoteCall__Outputs(this);
  }
}

export class VoteCall__Inputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }

  get encodedVotes(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class VoteCall__Outputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipent(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
